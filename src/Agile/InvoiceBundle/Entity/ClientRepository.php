<?php

namespace Agile\InvoiceBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Agile\InvoiceBundle\Entity\User;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends EntityRepository
{
    public function findContacts($client_id)
    {
        $query = $this->getEntityManager()->createQuery(
            'SELECT c FROM AgileInvoiceBundle:Contact c WHERE c.client = :client_id ORDER BY c.firstName ASC'
        )->setParameter('client_id', $client_id);

        $contacts = $query->getResult();

        return $contacts;
    }

    public function findAllOrderedByName(User $user)
    {
        // $em = $this->getEntityManager();
        // $query = $em->createQuery(
        //     'SELECT c FROM AgileInvoiceBundle:Client c
        //     WHERE c.archived = :archived AND c.user = :user
        //     ORDER BY c.name ASC'
        // )->setParameters(array('archived' => 0, 'user' => $user,));

        $repository = $this->getEntityManager()->getRepository('AgileInvoiceBundle:Client');
        $query = $repository->createQueryBuilder('c')
            ->where('c.archived = :archived')
            ->andWhere('c.user = :user')
            // ->setParameter('archived', 0)
            ->setParameters(array('archived' => 0, 'user' => $user))
            ->orderBy('c.name', 'ASC')
            ->getQuery()
        ;

        $clients = $query->getResult();

        return $clients;
    }

    public function findInactive($user)
    {
        $query = $this->getEntityManager()->createQuery(
            'SELECT c FROM AgileInvoiceBundle:Client c WHERE c.user = :user AND c.archived = :archived ORDER BY c.name ASC'
        )->setParameters(array('user' => $user, 'archived' => 1));

        $clients = $query->getResult();

        return $clients;
    }

    public function countInactiveClients($user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder()
            ->select('count(c.id)')
            ->from('AgileInvoiceBundle:Client', 'c')
            ->where('c.user = :user')
            ->andWhere('c.archived = :archived')
            ->setParameters(array('user' => $user, 'archived' => 1))
            ->getQuery()
        ;

        $count = $query->getSingleScalarResult();

        return $count;
    }

}
